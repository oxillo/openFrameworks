name: MSYS2 GHA
on: [push, pull_request]

jobs:
  msys2:
    runs-on: windows-latest
    strategy:
      matrix:
        mingw: [MINGW64,MINGW32]
    defaults:
      run:
        shell: msys2 {0}
    env: 
      MSYSTEM: ${{ matrix.mingw }}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            git
            unzip
            rsync
            wget
      - name: Install dependencies
        run: |
          echo 'Installing dependencies!'
          ./scripts/ci/msys2/install.sh
      - name: Build
        run: |
          echo 'Building Of'
          ./scripts/ci/msys2/build.sh
      - name: Run Tests
        run: |
          echo 'Running Test'
          ./scripts/ci/msys2/run_tests.sh

  vs2017:
    runs-on: windows-2016
    strategy:
      matrix:
        include:
          - platform: x64
            bits: 64
          - platform: Win32
            bits: 32
    env: 
      BITS: ${{ matrix.bits }}
    steps:
      - name: Cloning repository
        uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            git
            unzip
            rsync
            wget
      - name: Installing dependencies
        shell: msys2 {0}
        run: |
          ./scripts/ci/vs/install.sh
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Building openFrameworks
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        # https://docs.microsoft.com/fr-fr/cpp/build/walkthrough-using-msbuild-to-create-a-visual-cpp-project?view=msvc-160
        #msbuild libs/openFrameworksCompiled/project/vs/openframeworksLib.vcxproj
        #run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
        run:
          msbuild libs/openFrameworksCompiled/project/vs/openframeworksLib.vcxproj /p:configuration=release /p:platform=${{ matrix.platform }}
      - name: Building emptyExample
        run:
          msbuild examples/templates/emptyExample/emptyExample.vcxproj /p:configuration=release /p:platform=${{ matrix.platform }}
      - name: Building allAddonsExample
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run:
          msbuild examples/templates/allAddonsExample/allAddonsExample.vcxproj /p:configuration=release /p:platform=${{ matrix.platform }}
  
  linux64:
    runs-on: ubuntu-latest
    env:
      TARGET: linux64
    steps:
    - uses: actions/checkout@v2
    - name: install dependencies
      run: 
        ./scripts/ci/$TARGET/install.sh
    - name: Download libs
      run: 
        ./scripts/linux/download_libs.sh -a 64gcc6
    - name: Run tests
      run:
        ./scripts/ci/$TARGET/run_tests.sh

  raspberry:
    runs-on: ubuntu-latest
    env:
      TARGET: linuxarmv6l
      TOOLCHAIN_ROOT: /opt/pi
      RPI_ROOT: /opt/pi/systool
    steps:
    - uses: actions/checkout@v2
    - name: Install Raspberry toolchain
      run: |-
        mkdir /opt/pi
        pushd /opt/pi
        git clone https://github.com/raspberrypi/tools
        popd
    - name: Download Raspberry Pi sysroot
      run: |-
        mkdir -p /opt/pi/sysroot
        pushd /opt/pi/sysroot
        wget https://downloads.raspberrypi.org/raspios_lite_armhf/root.tar.xz 
        tar xz root.tar.xz
        popd
    - name: Download libs
      run: 
        ./scripts/linux/download_libs.sh -a armv6l
    - name: Build
      run:
        ./scripts/ci/linuxarmv6l/build.sh


  arch-linux:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |-
        pacman -Syu --noconfirm
        pacman -Sy --noconfirm --needed make pkgconf gcc openal glew freeglut freeimage gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-libav opencv libxcursor assimp boost glfw-x11 uriparser curl pugixml rtaudio poco
  
  osx:
    runs-on: macos-10.15
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
      MAC_OS_SDK_ROOT: /Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
      OPT: makefiles
    steps:
    - uses: actions/checkout@v2
    #- name: install dependencies
    #  run: 
    #    ./scripts/ci/osx/install.sh
    - name: Download libs
      run:
        ./scripts/osx/download_libs.sh
    - name: Run tests
      run: |-
        xcode-select -print-path
        ls $MAC_OS_SDK_ROOT
        sudo xcode-select -s /Applications/Xcode_11.7.app
        echo ${HEADER_SEARCH_PATHS}
    - name: Run tests
      run: 
        ./scripts/ci/osx/run_tests.sh

